library IEEE;
use IEEE.Std_logic_1164.all;
use IEEE.Numeric_Std.all;

entity ALU_DB_TO_REGISTER_tb is
end;

architecture bench of ALU_DB_TO_REGISTER_tb is

  component ALU_DB_TO_REGISTER
  port( ALU_BUS :in std_logic_vector(15 downto 0);
  ALU_DEST :in std_logic_vector(1 downto 0);
  clk :in std_logic;
  regl,rega,regb,regc :out std_logic_vector(15 downto 0));
  end component;

  signal ALU_BUS: std_logic_vector(15 downto 0):=x"0100";
  signal ALU_DEST: std_logic_vector(1 downto 0):="00";
  signal clk: std_logic:='0';
  signal regl,rega,regb,regc: std_logic_vector(15 downto 0):=x"0000";

  constant clock_period: time := 10 ns;
  signal stop_the_clock: boolean;

begin

  uut: ALU_DB_TO_REGISTER port map ( ALU_BUS  => ALU_BUS,
                                     ALU_DEST => ALU_DEST,
                                     clk      => clk,
                                     regl     => regl,
                                     rega     => rega,
                                     regb     => regb,
                                     regc     => regc );

  stimulus: process
  begin
  
    -- Put initialisation code here
       ALU_DEST<="00";
		 wait for 20 ns;
		 ALU_DEST<="01";
		 wait for 20 ns;
		 ALU_DEST<="10";
		 wait for 20 ns;
		 ALU_DEST<="11";
		 wait for 20 ns;

    -- Put test bench stimulus code here

    stop_the_clock <= true;
    wait;
  end process;

  clocking: process
  begin
    while not stop_the_clock loop
      clk <= '0', '1' after clock_period / 2;
      wait for clock_period;
    end loop;
    wait;
  end process;

end;