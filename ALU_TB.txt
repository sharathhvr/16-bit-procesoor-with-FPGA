library IEEE;
use IEEE.Std_logic_1164.all;
use IEEE.Numeric_Std.all;

entity ALU_tb is
end;

architecture bench of ALU_tb is

  component ALU
  port(ta,tb :in std_logic_vector(15 downto 0);
  cf,clk : in std_logic;
  alu_ops:in std_logic_vector(3 downto 0);
  zf,sf,carry: out std_logic;
  alu_out:out std_logic_vector(15 downto 0));
  end component;

  signal ta,tb: std_logic_vector(15 downto 0):=x"0000";
  signal cf,clk: std_logic:='0';
  signal alu_ops: std_logic_vector(3 downto 0):=x"0";
  signal zf,sf,carry: std_logic:='0';
  signal alu_out: std_logic_vector(15 downto 0):=x"0000";

  constant clock_period: time := 10 ns;
  signal stop_the_clock: boolean;

begin

  uut: ALU port map ( ta      => ta,
                      tb      => tb,
                      cf      => cf,
                      clk     => clk,
                      alu_ops => alu_ops,
                      zf      => zf,
                      sf      => sf,
                      carry   => carry,
                      alu_out => alu_out );

  stimulus: process
  begin
  
    -- Put initialisation code here
   ta<=x"0001";
	tb<=x"0001";
	cf<='0';
	alu_ops<="0111";
	wait for 20 ns;
	ta<=x"0001";
	tb<=x"0002";
	cf<='1';
	alu_ops<="1000";
	wait for 20 ns;
   ta<=x"0001";
	tb<=x"0001";
	cf<='0';
	alu_ops<="1001";
	wait for 20 ns;

    -- Put test bench stimulus code here

    stop_the_clock <= true;
    wait;
  end process;

  clocking: process
  begin
    while not stop_the_clock loop
      clk <= '0', '1' after clock_period / 2;
      wait for clock_period;
    end loop;
    wait;
  end process;

end;
  