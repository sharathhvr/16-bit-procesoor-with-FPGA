library IEEE;
use IEEE.Std_logic_1164.all;
use IEEE.Numeric_Std.all;

entity counter_tb is
end;

architecture bench of counter_tb is

  component counter
  port(cclock,creset,cce,cload:in std_logic;
  		cdin:in std_logic_vector(7 downto 0);
  		ccount:out std_logic_vector(7 downto 0));
  		end component;

  signal cclock,creset,cce,cload: std_logic:='0';
  signal cdin: std_logic_vector(7 downto 0):=x"00";
  signal ccount: std_logic_vector(7 downto 0):=x"00";

  constant clock_period: time := 10 ns;
  signal stop_the_clock: boolean;

begin

  uut: counter port map ( cclock => cclock,
                          creset => creset,
                          cce    => cce,
                          cload  => cload,
                          cdin   => cdin,
                          ccount => ccount );

  stimulus: process
  begin
  
    -- Put initialisation code here

    cce<='1';
	 cload<='0';
    creset <= '0';
	 cdin<="00000001";
    wait for 20 ns;
	 cce<='0';
	 cload<='0';
    creset <= '1';
	 cdin<="00000001";
    wait for 20 ns;
	 cce<='1';
	 cload<='0';
    creset <= '0';
	 cdin<="00000001";
    wait for 20 ns;
	 cce<='0';
	 cload<='1';
    creset <= '1';
	 cdin<="00000001";
    wait for 20 ns;

    -- Put test bench stimulus code here

    stop_the_clock <= true;
    wait;
  end process;

  clocking: process
  begin
    while not stop_the_clock loop
      cclock <= '0', '1' after clock_period / 2;
      wait for clock_period;
    end loop;
    wait;
  end process;

end;