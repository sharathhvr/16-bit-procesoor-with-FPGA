library IEEE;
use IEEE.Std_logic_1164.all;
use IEEE.Numeric_Std.all;

entity REGISTER_TO_ALU_tb is
end;

architecture bench of REGISTER_TO_ALU_tb is

  component REGISTER_TO_ALU
  port(regaa,regbb,regcc,regll :in std_logic_vector(15 downto 0);
  ALU_SRC :in std_logic_vector(2 downto 0);
  ain,bin :inout std_logic_vector(15 downto 0);
  clk: in std_logic);
  end component;

  signal regaa: std_logic_vector(15 downto 0):=x"0000";
  signal regbb: std_logic_vector(15 downto 0):=x"0002";
  signal regcc: std_logic_vector(15 downto 0):=x"0005";
  signal regll: std_logic_vector(15 downto 0):=x"0007";
  signal ALU_SRC: std_logic_vector(2 downto 0):="000";
  signal ain,bin: std_logic_vector(15 downto 0):=x"0000";
  signal clk: std_logic;

  constant clock_period: time := 10 ns;
  signal stop_the_clock: boolean;

begin

  uut: REGISTER_TO_ALU port map ( regaa   => regaa,
                                  regbb   => regbb,
                                  regcc   => regcc,
                                  regll   => regll,
                                  ALU_SRC => ALU_SRC,
                                  ain     => ain,
                                  bin     => bin,
                                  clk     => clk );

  stimulus: process
  begin
  
    -- Put initialisation code here
	   ALU_SRC<="000";
		wait for 20 ns;
		ALU_SRC<="001";
		wait for 20 ns;
		ALU_SRC<="010";
		wait for 20 ns;
		ALU_SRC<="011";
		wait for 20 ns;
		ALU_SRC<="100";
		wait for 20 ns;
		ALU_SRC<="101";
		wait for 20 ns;
		ALU_SRC<="110";
		wait for 20 ns;
		ALU_SRC<="111";
		wait for 20 ns;
    -- Put test bench stimulus code here

    stop_the_clock <= true;
    wait;
  end process;

  clocking: process
  begin
    while not stop_the_clock loop
      clk <= '0', '1' after clock_period / 2;
      wait for clock_period;
    end loop;
    wait;
  end process;

end;