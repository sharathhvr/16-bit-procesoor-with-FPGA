library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;  
use IEEE.NUMERIC_STD.ALL;

entity enable is
port(data_in:in std_logic_vector(15 downto 0);
	  data_out:inout std_logic_vector(15 downto 0);
	  en :in std_logic);
end enable;

architecture Behavioral of enable is
begin
process(en)
begin
if(en = '1')then
data_out<=data_in;
elsif(en = '0')then
data_out<=data_out;
end if;
end process;
end Behavioral;




library IEEE;
use IEEE.Std_logic_1164.all;
use IEEE.Numeric_Std.all;

entity enable_tb is
end;

architecture bench of enable_tb is

  component enable
  port(data_in:in std_logic_vector(15 downto 0);
  	  data_out:inout std_logic_vector(15 downto 0);
  	  en :in std_logic);
  end component;

  signal data_in: std_logic_vector(15 downto 0):=x"0000";
  signal data_out: std_logic_vector(15 downto 0):=x"0000";
  signal en: std_logic:='0';

begin

  uut: enable port map ( data_in  => data_in,
                         data_out => data_out,
                         en       => en );

  stimulus: process
  begin
  
    -- Put initialisation code here
	 data_in<=x"0001";
	 en<='0';
	 wait for 20 ns;
    -- Put test bench stimulus code here

    wait;
  end process;


end;
  